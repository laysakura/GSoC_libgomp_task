mallocとか使うべきじゃない．mallocの作り的にthread間でcontentionが起こる．



二重のparallel構文とかどうすんの?つーかparallel構文とかsingle構文で何をすべきか分かってない
nested parallel directive に関する仕様がやたら分かりづらい．

* 目標
  まずは最低限動くものを作る．後々実装するだろうけど，カットするfeatures
  - x86以外への対応
  - team の実装．なくても限定的なプログラム(ex:fib)であれば動く
  - cutoff
  - untied task
  - if(0) の実装
  - barrier 対応
  - 何かうまいこと親子関係に注意してworkstealしたらdata localityが担保できるらしいじゃん?それ
  - work-firstなscheduler,とそれに伴うcontext switch
    - work firstだと，親taskが子taskを生成した瞬間に，親をsuspendして子の実行を始めなければならない．
      つまり，task構文がスケジューリングポイントになる
  - nested parallel directive
  - overheadを減らすため，ところどころ関数じゃなくてmacroにする
    - static inline void __attribute__((always_inline)) fun(args) とかでヘッダに関数定義すればおkっぽい
  - assert()の代わりに，ユーザに有用なエラーメッセージ
  - cache alignment とかまで気にしたチューニング


* 概念図
  #+CAPTION: 概念図(4コアの場合)
  #+LABEL: fig:abstruct
  #+BEGIN_SRC ditaa :file abstruct.png :cmdline -s 2.5

 +------+                   +------+                     +------+                       +------+
 |      |                   |      |                     |      |                       |      |
 | CPU0 |                   | CPU1 |                     | CPU2 |                       | CPU3 |
 |      |                   |      |                     |      |                       |      |
 +--+---+                   +---+--+                     +---+--+                       +---+--+
    | affinity                  |                            |                              |
+---+-------------+        +----+------------+          +----+------------+            +----+------------+
|  user thread    |        |  user thread    |          |  user thread    |            |  user thread    |
|                 |        |                 |          |                 |            |                 |
|  pop/push       |        |  pop/push       |          |  pop/push       |            |  pop/push       |
|   +--+          |        |   +--+          |          |   +--+          |            |   +--+          |
|   |  |          |        |   |  |          |          |   |  |          |            |   |  |          |
|   +--+          |        |   +--+          |          |   +--+          |            |   +--+          |
|   |  |          |        |   |  |          |          |   |  |          |            |   |  |          |
|   +--+  deque   |        |   +--+  deque   |          |   +--+  deque   |            |   +--+  deque   |
|   |  |          |        |   |  |          |          |   |  |          |            |   |  |          |
|   +--+          |        |   +--+          |          |   +--+          |            |   +--+          |
|   |  |          |        |   |  |          |          |   |  |          |            |   |  |          |
|   +--+          |        |   +--+          |          |   +--+          |            |   +--+          |
|  take(steal)    |        |  take(steal)    |          |  take(steal)    |            |  take(steal)    |
+--------+--------+        +--------+--------+          +--------+--------+            +---------+-------+
         |   point                  |                            |                               |
         v                          v                            v                               v
+--------+--------+        +-----------------+          +-----------------+            +-----------------+
|  kernel thread  |        |  kernel thread  |          |  kernel thread  |            |  kernel thread  |
|  = pthread      |        |  = pthread      |          |  = pthread      |            |  = pthread      |
|                 |        |                 |          |                 |            |                 |
| +-----------+   |        | +-----------+   |          | +-----------+   |            | +-----------+   |
| |           |   |        | |           |   |          | |           |   |            | |           |   |
| +-----------+   |        | +-----------+   |          | +-----------+   |            | +-----------+   |
| |           |   |        | |           |   |          | |           |   |            | |           |   |
| +-----------+   |        | +-----------+   |          | +-----------+   |            | +-----------+   |
|  call-stack     |        |  call-stack     |          |  call-stack     |            |  call-stack     |
+-----------------+        +-----------------+          +-----------------+            +-----------------+

  #+END_SRC


* Data structures
** task
   - 実行すべきコード(outlinedなやつ)と引数
   - volatile num_children: 子taskの数．これが0になったらtaskwait終了．
     これを増減させるのは，各子の役割にするのが綺麗．
   - parent: 親taskへのポインタ．親のnum_childrenの増減などに使う．
   *子taskの実行結果はどのように取得するか*


** user thread (worker)
   CPUコアと同じ数だけ存在するのが理想．実際にはOMP_NUM_THREADSとかに左右される
   - task queue: taskを入れるdeque．この中の全てのtaskはworksteal対象
     (breadth-first scheduling における tied taskはsuspendすることがないので)．
   - kernel thread へのポインタ: queueから出したtaskはこいつに実行してもらう
   - task queue が空になった際に実行する処理へのポインタ:
     空の時は，work stealingをする処理をずっとさせておく
   - thread id: master thread の0からスタートするあれ

** kernel thread
   user thread と同じ数だけ存在する(1:1対応)．pthreadが実体．
   pthread_setaffinity_np() とかで1つのCPUコアにbindさせる．
   (他のプロセスとの)context switchはkernel schedulerに任せ，callstackはpthreadのものをそのまま使う

** team
   user thread の集合を管理
   - master_thread: master_threadへのポインタ

** task private queue
   task のdeque．双方向リストで実装(配列は，1つずらしとかがあるので向いてない)．
   と思ったが，リストはnext,prevポインタのメモリ使用が気になる．配列をとことん抽象化させようと思う．
   具体的にはこんな感じ．
   まず特定のサイズの配列を確保する．インターフェースはhead/tailに対するアクセスだけなので，taskが挿入されるごとにhead/tail
   のindexをズラしていけばおk．dequeのサイズ自体が足りなくなったら配列のサイズを大きくする(MassiveThreadsでは実装諦めてたw)
   - dequeに対して抽象的なアクセスを可能にするメソッド群
   - mutex: 排他制御の鍵

* Events
** work stealing
   1. 自分以外のworkerをランダムに選ぶ
   2. そのworkerがworkstealingを許可していれば，そのworkerのdequeをロックし，taskを奪うことを試みる．
   3. 2が成功すればwork stealing 終了．失敗すれば1に戻る

   2は多少掘り下げる必要がある．「許可」の条件を，「taskが一個以上dequeに残っている」とし，taskを奪う動作をするときに
   もしかしたら既にdequeにtaskはいないことも仮定するようにする．こうすれば，dequeに対するlockを最小限にすることができるのではないか

** taskwait
   *taskwaitの処理って，worker threadひとつ使ってするもの?流石にthreadもったいなくない?*
   -> それはあり得ない．勿体無いどころかすぐにthread足りなくなって実行が止まる
   確か，taskwaitになった場合の動作はOpenMP spec にも書いてた気がする

   taskwait directive にぶち当たったら，while(1)を走らせ，以下の処理をする
   1. taskwait にぶち当たった task を特定．以下，親と呼ぶ
   2. 親の子どもが全て実行を終えている(オブジェクト的に死んでいる)か確認
   3. 子どもが皆死んでいれば，親も死ぬ
   4. 生きていれば，2からループ


** Meeting tied task directive
** Meeting taskwait directive
